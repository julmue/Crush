-- a 'standard library' of tested combinators for happy hacking;
-- just replace the last id with your own program!

let fix    = \g.(\x.g (x x)) (\x.g (x x)) in
let id     = \x.x
let zro    = \f.\x.x in
let scc    = \n.\f.\x.f (n f x) in
let prd    = \n.\f.\x.n (\g.\h.h (g f)) (\u.x) (\u.u) in
let one    = \f.\x.f x in
let n2c    = scc one in
let n3c    = scc n2c in
let n4c    = scc n3c in
let n5c    = scc n4c in
let n6c    = scc n5c in
let n7c    = scc n6c in
let n8c    = scc n7c in
let n9c    = scc n8c in
let tru    = \x.\y.x in
let fls    = \x.\y.y in
let and    = \p.\q.p q p in
let or     = \p.\q.p p q in
let not    = \p.\a.\b.p b a in
let imp    = \p.\q.or (not p) q in
let iff    = \p.\q.and (imp p q) (imp q p) in
let if     = \p.\a.\b.p a b in
let iszro  = \n.n (\x.fls) tru in
let add    = fix (\radd.\m.\n.if (iszro n) m (scc (radd m (prd n)))) in
let sub    = \m.\n.n prd m in
let mlt    = fix (\rmlt.\m.\n.if (iszro m) zro (add n (rmlt (prd m) n))) in
let fac    = fix (\rfac.\x. if (iszro x) one (mlt x (rfac (prd x)))) in
let pow    = \b.\e.e b in
let leqnat = \m.\n.iszro (sub m n) in
let eqnat  = \m.\n.iff (leqnat m n) (leqnat n m) in
id
